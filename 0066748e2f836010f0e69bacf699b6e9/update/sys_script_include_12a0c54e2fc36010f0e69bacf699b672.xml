<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_441625_bulk.ChecksumUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>ChecksumUtils</name>
        <script><![CDATA[var ChecksumUtils = Class.create();
ChecksumUtils.prototype = {
    initialize: function() {
    },
	
	produceChecksum: function(checklist_blueprint) {
		var parsedChecklist = JSON.parse(checklist_blueprint);
		var checksumArray = [];

		// retrieve & sort pre_checklist items
		var preList = parsedChecklist.pre_checklist.checklists.ruleDetails;
		var preChecklist = [];
		for (i in preList) {
			if (preList[i]) {
				var preObj = {
					"order": parseInt(preList[i].order, 10),
					"checklist": preList[i].checklist
				};
				preChecklist.push(preObj);
			}
		}
		preChecklist.sort(function(a, b) {
			return a.order == b.order ? 0 : +(a.order > b.order) || -1;
		});

		// add pre_checklist ruleDetails.checklist ids to checksum array
		for (j in preChecklist) {
			if (preChecklist[j].checklist) {
				checksumArray.push(preChecklist[j].checklist);
			}
		}

		// retrieve & sort working_checklist items
		var workList = parsedChecklist.working_checklist.checklists.ruleDetails;
		var workingChecklist = [];
		for (k in workList) {
			if (workList[k]) {
				var workObj = {
					"order": parseInt(workList[k].order, 10),
					"checklist": workList[k].checklist
				};
				workingChecklist.push(workObj);
			}
		}
		workingChecklist.sort(function(a, b) {
			return a.order == b.order ? 0 : +(a.order > b.order) || -1;
		});

		// add working_checklist ruleDetails.checklist ids to checksum array
		for (l in workingChecklist) {
			if (workingChecklist[l].checklist) {
				checksumArray.push(workingChecklist[l].checklist);
			}
		}

		// create checksum value from checksum array (or populate with "-1" if array is empty)
		var checksum = -1;
		var chars;
		if (checksumArray.length > 0) {
			var data = checksumArray.toString();
			chars = data.replace(/[,\s]/g, '');
			for (var m = 0; m < chars.length; m++) {
				checksum = ((checksum >> 4) + checksum + chars.charCodeAt(m));
			}
			checksum = Math.abs(checksum);
		}
		checksum = checksum.toString();
		return checksum;
	},

    type: 'ChecksumUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>sean</sys_created_by>
        <sys_created_on>2021-03-23 16:19:53</sys_created_on>
        <sys_id>12a0c54e2fc36010f0e69bacf699b672</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ChecksumUtils</sys_name>
        <sys_package display_value="Bulk Update" source="x_441625_bulk">0066748e2f836010f0e69bacf699b6e9</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Bulk Update">0066748e2f836010f0e69bacf699b6e9</sys_scope>
        <sys_update_name>sys_script_include_12a0c54e2fc36010f0e69bacf699b672</sys_update_name>
        <sys_updated_by>sean</sys_updated_by>
        <sys_updated_on>2021-03-23 16:19:53</sys_updated_on>
    </sys_script_include>
</record_update>
